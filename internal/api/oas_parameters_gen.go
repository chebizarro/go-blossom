// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ListPubkeyGetParams is parameters of GET /list/{pubkey} operation.
type ListPubkeyGetParams struct {
	Pubkey string
	Since  OptInt
	Until  OptInt
}

func unpackListPubkeyGetParams(packed middleware.Parameters) (params ListPubkeyGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "pubkey",
			In:   "path",
		}
		params.Pubkey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "until",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Until = v.(OptInt)
		}
	}
	return params
}

func decodeListPubkeyGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ListPubkeyGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: pubkey.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pubkey",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Pubkey = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pubkey",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: until.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotUntilVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "until",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SHA256DeleteParams is parameters of DELETE /{sha256} operation.
type SHA256DeleteParams struct {
	SHA256 string
}

func unpackSHA256DeleteParams(packed middleware.Parameters) (params SHA256DeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "sha256",
			In:   "path",
		}
		params.SHA256 = packed[key].(string)
	}
	return params
}

func decodeSHA256DeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SHA256DeleteParams, _ error) {
	// Decode path: sha256.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sha256",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SHA256 = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sha256",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SHA256GetParams is parameters of GET /{sha256} operation.
type SHA256GetParams struct {
	SHA256 string
}

func unpackSHA256GetParams(packed middleware.Parameters) (params SHA256GetParams) {
	{
		key := middleware.ParameterKey{
			Name: "sha256",
			In:   "path",
		}
		params.SHA256 = packed[key].(string)
	}
	return params
}

func decodeSHA256GetParams(args [1]string, argsEscaped bool, r *http.Request) (params SHA256GetParams, _ error) {
	// Decode path: sha256.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sha256",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SHA256 = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sha256",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SHA256HeadParams is parameters of HEAD /{sha256} operation.
type SHA256HeadParams struct {
	SHA256 string
}

func unpackSHA256HeadParams(packed middleware.Parameters) (params SHA256HeadParams) {
	{
		key := middleware.ParameterKey{
			Name: "sha256",
			In:   "path",
		}
		params.SHA256 = packed[key].(string)
	}
	return params
}

func decodeSHA256HeadParams(args [1]string, argsEscaped bool, r *http.Request) (params SHA256HeadParams, _ error) {
	// Decode path: sha256.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sha256",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SHA256 = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sha256",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadHeadParams is parameters of HEAD /upload operation.
type UploadHeadParams struct {
	XSHA256        string
	XContentType   string
	XContentLength int
}

func unpackUploadHeadParams(packed middleware.Parameters) (params UploadHeadParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-SHA-256",
			In:   "header",
		}
		params.XSHA256 = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Content-Type",
			In:   "header",
		}
		params.XContentType = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Content-Length",
			In:   "header",
		}
		params.XContentLength = packed[key].(int)
	}
	return params
}

func decodeUploadHeadParams(args [0]string, argsEscaped bool, r *http.Request) (params UploadHeadParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-SHA-256.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-SHA-256",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XSHA256 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-SHA-256",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Content-Type.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Content-Type",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XContentType = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Content-Type",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Content-Length.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Content-Length",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentLength = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Content-Length",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
