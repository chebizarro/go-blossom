// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
)

// ListPubkeyGetNotFound is response for ListPubkeyGet operation.
type ListPubkeyGetNotFound struct{}

func (*ListPubkeyGetNotFound) listPubkeyGetRes() {}

type ListPubkeyGetOKApplicationJSON []ListPubkeyGetOKItem

func (*ListPubkeyGetOKApplicationJSON) listPubkeyGetRes() {}

type ListPubkeyGetOKItem struct {
	// SHA256 hash of the blob.
	SHA256 OptString `json:"sha256"`
	// URL where the blob can be retrieved.
	URL OptString `json:"url"`
	// Size of the blob in bytes.
	Size OptInt `json:"size"`
	// MIME type of the blob (optional).
	Type OptString `json:"type"`
	// Unix timestamp of when the blob was uploaded.
	Uploaded OptInt `json:"uploaded"`
}

// GetSHA256 returns the value of SHA256.
func (s *ListPubkeyGetOKItem) GetSHA256() OptString {
	return s.SHA256
}

// GetURL returns the value of URL.
func (s *ListPubkeyGetOKItem) GetURL() OptString {
	return s.URL
}

// GetSize returns the value of Size.
func (s *ListPubkeyGetOKItem) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *ListPubkeyGetOKItem) GetType() OptString {
	return s.Type
}

// GetUploaded returns the value of Uploaded.
func (s *ListPubkeyGetOKItem) GetUploaded() OptInt {
	return s.Uploaded
}

// SetSHA256 sets the value of SHA256.
func (s *ListPubkeyGetOKItem) SetSHA256(val OptString) {
	s.SHA256 = val
}

// SetURL sets the value of URL.
func (s *ListPubkeyGetOKItem) SetURL(val OptString) {
	s.URL = val
}

// SetSize sets the value of Size.
func (s *ListPubkeyGetOKItem) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *ListPubkeyGetOKItem) SetType(val OptString) {
	s.Type = val
}

// SetUploaded sets the value of Uploaded.
func (s *ListPubkeyGetOKItem) SetUploaded(val OptInt) {
	s.Uploaded = val
}

// ListPubkeyGetUnauthorized is response for ListPubkeyGet operation.
type ListPubkeyGetUnauthorized struct{}

func (*ListPubkeyGetUnauthorized) listPubkeyGetRes() {}

// MirrorPutBadRequest is response for MirrorPut operation.
type MirrorPutBadRequest struct{}

func (*MirrorPutBadRequest) mirrorPutRes() {}

// MirrorPutNotFound is response for MirrorPut operation.
type MirrorPutNotFound struct{}

func (*MirrorPutNotFound) mirrorPutRes() {}

type MirrorPutOK struct {
	// SHA256 hash of the mirrored blob.
	SHA256 OptString `json:"sha256"`
	// URL where the mirrored blob can be retrieved.
	URL OptString `json:"url"`
	// Size of the mirrored blob in bytes.
	Size OptInt `json:"size"`
	// Unix timestamp of when the blob was mirrored.
	Uploaded OptInt `json:"uploaded"`
}

// GetSHA256 returns the value of SHA256.
func (s *MirrorPutOK) GetSHA256() OptString {
	return s.SHA256
}

// GetURL returns the value of URL.
func (s *MirrorPutOK) GetURL() OptString {
	return s.URL
}

// GetSize returns the value of Size.
func (s *MirrorPutOK) GetSize() OptInt {
	return s.Size
}

// GetUploaded returns the value of Uploaded.
func (s *MirrorPutOK) GetUploaded() OptInt {
	return s.Uploaded
}

// SetSHA256 sets the value of SHA256.
func (s *MirrorPutOK) SetSHA256(val OptString) {
	s.SHA256 = val
}

// SetURL sets the value of URL.
func (s *MirrorPutOK) SetURL(val OptString) {
	s.URL = val
}

// SetSize sets the value of Size.
func (s *MirrorPutOK) SetSize(val OptInt) {
	s.Size = val
}

// SetUploaded sets the value of Uploaded.
func (s *MirrorPutOK) SetUploaded(val OptInt) {
	s.Uploaded = val
}

func (*MirrorPutOK) mirrorPutRes() {}

type MirrorPutReq struct {
	// URL of the blob to be mirrored.
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *MirrorPutReq) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *MirrorPutReq) SetURL(val OptString) {
	s.URL = val
}

// MirrorPutUnauthorized is response for MirrorPut operation.
type MirrorPutUnauthorized struct{}

func (*MirrorPutUnauthorized) mirrorPutRes() {}

type NostrEventAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *NostrEventAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *NostrEventAuth) SetToken(val string) {
	s.Token = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// SHA256DeleteNotFound is response for SHA256Delete operation.
type SHA256DeleteNotFound struct{}

func (*SHA256DeleteNotFound) sHA256DeleteRes() {}

// SHA256DeleteOK is response for SHA256Delete operation.
type SHA256DeleteOK struct{}

func (*SHA256DeleteOK) sHA256DeleteRes() {}

// SHA256DeleteUnauthorized is response for SHA256Delete operation.
type SHA256DeleteUnauthorized struct{}

func (*SHA256DeleteUnauthorized) sHA256DeleteRes() {}

// SHA256GetNotFound is response for SHA256Get operation.
type SHA256GetNotFound struct{}

func (*SHA256GetNotFound) sHA256GetRes() {}

type SHA256GetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SHA256GetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SHA256GetOK) sHA256GetRes() {}

// SHA256GetUnauthorized is response for SHA256Get operation.
type SHA256GetUnauthorized struct{}

func (*SHA256GetUnauthorized) sHA256GetRes() {}

// SHA256HeadNotFound is response for SHA256Head operation.
type SHA256HeadNotFound struct{}

func (*SHA256HeadNotFound) sHA256HeadRes() {}

// SHA256HeadOK is response for SHA256Head operation.
type SHA256HeadOK struct{}

func (*SHA256HeadOK) sHA256HeadRes() {}

// UploadHeadBadRequest is response for UploadHead operation.
type UploadHeadBadRequest struct{}

func (*UploadHeadBadRequest) uploadHeadRes() {}

// UploadHeadForbidden is response for UploadHead operation.
type UploadHeadForbidden struct{}

func (*UploadHeadForbidden) uploadHeadRes() {}

// UploadHeadOK is response for UploadHead operation.
type UploadHeadOK struct{}

func (*UploadHeadOK) uploadHeadRes() {}

// UploadHeadRequestEntityTooLarge is response for UploadHead operation.
type UploadHeadRequestEntityTooLarge struct{}

func (*UploadHeadRequestEntityTooLarge) uploadHeadRes() {}

// UploadHeadUnauthorized is response for UploadHead operation.
type UploadHeadUnauthorized struct{}

func (*UploadHeadUnauthorized) uploadHeadRes() {}

// UploadHeadUnsupportedMediaType is response for UploadHead operation.
type UploadHeadUnsupportedMediaType struct{}

func (*UploadHeadUnsupportedMediaType) uploadHeadRes() {}

// UploadPutBadRequest is response for UploadPut operation.
type UploadPutBadRequest struct{}

func (*UploadPutBadRequest) uploadPutRes() {}

type UploadPutOK struct {
	// SHA256 hash of the uploaded blob.
	SHA256 OptString `json:"sha256"`
	// URL where the blob can be retrieved.
	URL OptString `json:"url"`
	// Size of the blob in bytes.
	Size OptInt `json:"size"`
	// Unix timestamp of when the blob was uploaded.
	Uploaded OptInt `json:"uploaded"`
}

// GetSHA256 returns the value of SHA256.
func (s *UploadPutOK) GetSHA256() OptString {
	return s.SHA256
}

// GetURL returns the value of URL.
func (s *UploadPutOK) GetURL() OptString {
	return s.URL
}

// GetSize returns the value of Size.
func (s *UploadPutOK) GetSize() OptInt {
	return s.Size
}

// GetUploaded returns the value of Uploaded.
func (s *UploadPutOK) GetUploaded() OptInt {
	return s.Uploaded
}

// SetSHA256 sets the value of SHA256.
func (s *UploadPutOK) SetSHA256(val OptString) {
	s.SHA256 = val
}

// SetURL sets the value of URL.
func (s *UploadPutOK) SetURL(val OptString) {
	s.URL = val
}

// SetSize sets the value of Size.
func (s *UploadPutOK) SetSize(val OptInt) {
	s.Size = val
}

// SetUploaded sets the value of Uploaded.
func (s *UploadPutOK) SetUploaded(val OptInt) {
	s.Uploaded = val
}

func (*UploadPutOK) uploadPutRes() {}

type UploadPutReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadPutReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// UploadPutUnauthorized is response for UploadPut operation.
type UploadPutUnauthorized struct{}

func (*UploadPutUnauthorized) uploadPutRes() {}
