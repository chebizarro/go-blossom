// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ListPubkeyGet implements GET /list/{pubkey} operation.
	//
	// The `GET /list/{pubkey}` endpoint retrieves a list of blobs uploaded by a user, identified by
	// their Nostr public key.
	// Optionally, the server may require authorization for listing blobs.
	//
	// GET /list/{pubkey}
	ListPubkeyGet(ctx context.Context, params ListPubkeyGetParams) (ListPubkeyGetRes, error)
	// MirrorPut implements PUT /mirror operation.
	//
	// The `PUT /mirror` endpoint allows users to mirror a blob from another server without directly
	// uploading it.
	// The request must contain a URL to the remote blob and an authorization event for the upload.
	//
	// PUT /mirror
	MirrorPut(ctx context.Context, req *MirrorPutReq) (MirrorPutRes, error)
	// SHA256Delete implements DELETE /{sha256} operation.
	//
	// The `DELETE /{sha256}` endpoint removes the blob identified by its SHA256 hash.
	// This operation must be authorized using a Nostr event signed by the user.
	//
	// DELETE /{sha256}
	SHA256Delete(ctx context.Context, params SHA256DeleteParams) (SHA256DeleteRes, error)
	// SHA256Get implements GET /{sha256} operation.
	//
	// The `GET /{sha256}` endpoint retrieves the contents of the blob with the specified SHA256 hash.
	// Optionally, an authorization event may be required to access this blob.
	//
	// GET /{sha256}
	SHA256Get(ctx context.Context, params SHA256GetParams) (SHA256GetRes, error)
	// SHA256Head implements HEAD /{sha256} operation.
	//
	// The `HEAD /{sha256}` endpoint checks if the blob exists on the server by its SHA256 hash.
	//
	// HEAD /{sha256}
	SHA256Head(ctx context.Context, params SHA256HeadParams) (SHA256HeadRes, error)
	// UploadHead implements HEAD /upload operation.
	//
	// The `HEAD /upload` endpoint checks whether a blob can be uploaded by validating the SHA256 hash,
	// MIME type, and size of the blob. Optionally, this endpoint can accept an authorization event.
	//
	// HEAD /upload
	UploadHead(ctx context.Context, params UploadHeadParams) (UploadHeadRes, error)
	// UploadPut implements PUT /upload operation.
	//
	// The `PUT /upload` endpoint allows users to upload a new blob to the server. The blob is addressed
	// by its SHA256 hash,
	// and the upload must be authorized with a Nostr event signed by the user.
	//
	// PUT /upload
	UploadPut(ctx context.Context, req UploadPutReq) (UploadPutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
