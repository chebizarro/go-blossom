// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeListPubkeyGetResponse(resp *http.Response) (res ListPubkeyGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ListPubkeyGetOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &ListPubkeyGetUnauthorized{}, nil
	case 404:
		// Code 404.
		return &ListPubkeyGetNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMirrorPutResponse(resp *http.Response) (res MirrorPutRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MirrorPutOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &MirrorPutBadRequest{}, nil
	case 401:
		// Code 401.
		return &MirrorPutUnauthorized{}, nil
	case 404:
		// Code 404.
		return &MirrorPutNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSHA256DeleteResponse(resp *http.Response) (res SHA256DeleteRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &SHA256DeleteOK{}, nil
	case 401:
		// Code 401.
		return &SHA256DeleteUnauthorized{}, nil
	case 404:
		// Code 404.
		return &SHA256DeleteNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSHA256GetResponse(resp *http.Response) (res SHA256GetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/octet-stream":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := SHA256GetOK{Data: bytes.NewReader(b)}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &SHA256GetUnauthorized{}, nil
	case 404:
		// Code 404.
		return &SHA256GetNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSHA256HeadResponse(resp *http.Response) (res SHA256HeadRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &SHA256HeadOK{}, nil
	case 404:
		// Code 404.
		return &SHA256HeadNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUploadHeadResponse(resp *http.Response) (res UploadHeadRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &UploadHeadOK{}, nil
	case 400:
		// Code 400.
		return &UploadHeadBadRequest{}, nil
	case 401:
		// Code 401.
		return &UploadHeadUnauthorized{}, nil
	case 403:
		// Code 403.
		return &UploadHeadForbidden{}, nil
	case 413:
		// Code 413.
		return &UploadHeadRequestEntityTooLarge{}, nil
	case 415:
		// Code 415.
		return &UploadHeadUnsupportedMediaType{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUploadPutResponse(resp *http.Response) (res UploadPutRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response UploadPutOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &UploadPutBadRequest{}, nil
	case 401:
		// Code 401.
		return &UploadPutUnauthorized{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
